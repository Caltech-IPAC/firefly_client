[build-system]
requires = ["setuptools >= 64.0"]
build-backend = "setuptools.build_meta"

[project]
name = "firefly_client"
version = "3.3.0"
description = "Python API for Firefly: display astronomical data as tables, images, charts, and more!"
authors = [{ name = "IPAC LSST SUIT" }]
readme = "README.md"
license = { file = "License.txt" }
requires-python = ">=3.10"
dependencies = ["websocket-client", "requests"]
keywords = [
    "jupyter",
    "firefly",
    "caltech",
    "ipac",
    "astronomy",
    "visualization",
    "images",
    "charts",
    "tables",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Visualization",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]

[project.urls]
Homepage = "https://github.com/Caltech-IPAC/firefly_client"
Documentation = "https://caltech-ipac.github.io/firefly_client"
Repository = "http://github.com/Caltech-IPAC/firefly_client.git"

[project.optional-dependencies]
docs = [
    "Sphinx~=7.1.0",
    "sphinx-automodapi",
    "pydata-sphinx-theme",
    "myst-parser",
]
test = [
    "pytest>=8.3.4",
    "pytest-container>=0.4.3",
    "pytest-cov>=6.0.0",
    "pytest-doctestplus>=1.4.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",
    "tox>=4.0",
    "tox-uv>=1.20",
]
astropy = ["astropy>=6"]

[tool.setuptools]
packages = ["firefly_client"]

[tool.pytest.ini_options]
testpaths = ["firefly_client", "docs", "test"]
doctest_plus = "enabled"
text_file_format = "rst"
addopts = [
    "--doctest-rst",
    "--numprocesses=4",
    "--import-mode=importlib",
    "--cov=firefly_client",
    "--cov-append",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:coverage",
    "--doctest-modules",
]

[tool.coverage.run]
omit = [
    "firefly_client/conftest.py",
    "firefly_client/*setup_package*",
    "firefly_client/tests/*",
    "firefly_client/*/tests/*",
    "firefly_client/extern/*",
    "firefly_client/version*",
    "*/firefly_client/conftest.py",
    "*/firefly_client/*setup_package*",
    "*/firefly_client/tests/*",
    "*/firefly_client/*/tests/*",
    "*/firefly_client/extern/*",
    "*/firefly_client/version*",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about packages we have installed
    "except ImportError",
    # Don't complain if tests don't hit assertions
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain about script hooks
    "def main(.*):",
    # Ignore branches that don't pertain to this version of Python
    "pragma: py{ignore_python_version}",
    # Don't complain about IPython completion helper
    "def _ipython_key_completions_",
    # typing.TYPE_CHECKING is False at runtime
    "if TYPE_CHECKING:",
    # Ignore typing overloads
    "@overload",
]

[tool.tox]
env_list = ["clean", "3.10", "3.11", "3.12", "3.13", "3.14", "build_docs"]
requires = ["tox>=4.0", "tox-uv>=1.20"]

[tool.tox.env_run_base]
commands = [
    [
        "pytest",
        "--doctest-rst",
        "--numprocesses=4",
        "--import-mode=importlib",
        "--cov=firefly_client",
        "--cov-append",
        "--cov-report=term-missing",
        "--cov-report=xml:coverage.xml",
        "--cov-report=html:coverage",
        "--doctest-modules",
        "{posargs}",
    ],
]
runner = "uv-venv-lock-runner"
description = "run tests with the oldest supported version of key dependencies on {base_python}"
pass_env = ["TOXENV", "CI", "CC", "LOCALE_ARCHIVE", "LC_ALL"]
set_env = { MPLBACKEND = "agg" }
dependency_groups = ["test", "astropy"]
uv_python_preference = "only-managed"
allowlist_externals = ["python"]

[tool.tox.env.clean]
description = "Clean artifacts before testing"
commands = [["coverage", "erase"]]
runner = "uv-venv-lock-runner"
dependency_groups = ["test", "astropy"]
uv_python_preference = "only-managed"
allowlist_externals = ["python"]

[tool.tox.env.build_docs]
description = "invoke sphinx-build to build the HTML docs"
change_dir = "docs"
dependency_groups = ["docs"]
commands = [["make", "html"]]
uv_python_preference = "only-managed"
allowlist_externals = ["python", "make", "uv"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs",
]

# Same as Black.
line-length = 88
indent-width = 4

# Ensure code can be executed on python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "C90", "I", "RUF"]
ignore = ["RUF002"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-local-folder = ["firefly_client"]
length-sort = true
lines-after-imports = 2

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 12

[tool.ruff.lint.pydoclint]
# Skip docstrings which fit on a single line.
ignore-one-line-docstrings = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"
